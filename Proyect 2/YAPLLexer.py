# Generated from YAPL.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,57,364,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,1,0,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,
        14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
        17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
        19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,
        26,1,26,1,27,1,27,1,28,1,28,5,28,222,8,28,10,28,12,28,225,9,28,1,
        29,4,29,228,8,29,11,29,12,29,229,1,30,1,30,1,30,1,30,5,30,236,8,
        30,10,30,12,30,239,9,30,1,30,1,30,1,31,4,31,244,8,31,11,31,12,31,
        245,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,
        1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,
        1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,
        1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,
        1,54,1,54,5,54,340,8,54,10,54,12,54,343,9,54,1,54,1,54,1,54,1,54,
        1,55,1,55,1,55,1,55,5,55,353,8,55,10,55,12,55,356,9,55,1,55,1,55,
        1,55,1,55,1,55,1,56,1,56,2,341,354,0,57,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
        40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        51,103,52,105,53,107,54,109,55,111,56,113,57,1,0,6,2,0,65,90,97,
        122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,34,34,92,92,4,0,10,
        10,13,13,34,34,92,92,3,0,9,10,13,13,32,32,370,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
        0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,
        0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
        113,1,0,0,0,1,115,1,0,0,0,3,121,1,0,0,0,5,130,1,0,0,0,7,132,1,0,
        0,0,9,134,1,0,0,0,11,136,1,0,0,0,13,138,1,0,0,0,15,140,1,0,0,0,17,
        143,1,0,0,0,19,145,1,0,0,0,21,147,1,0,0,0,23,149,1,0,0,0,25,156,
        1,0,0,0,27,160,1,0,0,0,29,163,1,0,0,0,31,166,1,0,0,0,33,171,1,0,
        0,0,35,176,1,0,0,0,37,179,1,0,0,0,39,185,1,0,0,0,41,190,1,0,0,0,
        43,195,1,0,0,0,45,200,1,0,0,0,47,205,1,0,0,0,49,211,1,0,0,0,51,213,
        1,0,0,0,53,215,1,0,0,0,55,217,1,0,0,0,57,219,1,0,0,0,59,227,1,0,
        0,0,61,231,1,0,0,0,63,243,1,0,0,0,65,249,1,0,0,0,67,254,1,0,0,0,
        69,258,1,0,0,0,71,265,1,0,0,0,73,268,1,0,0,0,75,275,1,0,0,0,77,285,
        1,0,0,0,79,290,1,0,0,0,81,293,1,0,0,0,83,298,1,0,0,0,85,302,1,0,
        0,0,87,309,1,0,0,0,89,313,1,0,0,0,91,316,1,0,0,0,93,319,1,0,0,0,
        95,321,1,0,0,0,97,323,1,0,0,0,99,325,1,0,0,0,101,327,1,0,0,0,103,
        329,1,0,0,0,105,331,1,0,0,0,107,333,1,0,0,0,109,335,1,0,0,0,111,
        348,1,0,0,0,113,362,1,0,0,0,115,116,5,99,0,0,116,117,5,108,0,0,117,
        118,5,97,0,0,118,119,5,115,0,0,119,120,5,115,0,0,120,2,1,0,0,0,121,
        122,5,105,0,0,122,123,5,110,0,0,123,124,5,104,0,0,124,125,5,101,
        0,0,125,126,5,114,0,0,126,127,5,105,0,0,127,128,5,116,0,0,128,129,
        5,115,0,0,129,4,1,0,0,0,130,131,5,43,0,0,131,6,1,0,0,0,132,133,5,
        45,0,0,133,8,1,0,0,0,134,135,5,42,0,0,135,10,1,0,0,0,136,137,5,47,
        0,0,137,12,1,0,0,0,138,139,5,60,0,0,139,14,1,0,0,0,140,141,5,60,
        0,0,141,142,5,61,0,0,142,16,1,0,0,0,143,144,5,61,0,0,144,18,1,0,
        0,0,145,146,5,64,0,0,146,20,1,0,0,0,147,148,5,126,0,0,148,22,1,0,
        0,0,149,150,5,114,0,0,150,151,5,101,0,0,151,152,5,116,0,0,152,153,
        5,117,0,0,153,154,5,114,0,0,154,155,5,110,0,0,155,24,1,0,0,0,156,
        157,5,108,0,0,157,158,5,101,0,0,158,159,5,116,0,0,159,26,1,0,0,0,
        160,161,5,105,0,0,161,162,5,110,0,0,162,28,1,0,0,0,163,164,5,105,
        0,0,164,165,5,102,0,0,165,30,1,0,0,0,166,167,5,116,0,0,167,168,5,
        104,0,0,168,169,5,101,0,0,169,170,5,110,0,0,170,32,1,0,0,0,171,172,
        5,101,0,0,172,173,5,108,0,0,173,174,5,115,0,0,174,175,5,101,0,0,
        175,34,1,0,0,0,176,177,5,102,0,0,177,178,5,105,0,0,178,36,1,0,0,
        0,179,180,5,119,0,0,180,181,5,104,0,0,181,182,5,105,0,0,182,183,
        5,108,0,0,183,184,5,101,0,0,184,38,1,0,0,0,185,186,5,108,0,0,186,
        187,5,111,0,0,187,188,5,111,0,0,188,189,5,112,0,0,189,40,1,0,0,0,
        190,191,5,112,0,0,191,192,5,111,0,0,192,193,5,111,0,0,193,194,5,
        108,0,0,194,42,1,0,0,0,195,196,5,115,0,0,196,197,5,101,0,0,197,198,
        5,108,0,0,198,199,5,102,0,0,199,44,1,0,0,0,200,201,5,116,0,0,201,
        202,5,114,0,0,202,203,5,117,0,0,203,204,5,101,0,0,204,46,1,0,0,0,
        205,206,5,102,0,0,206,207,5,97,0,0,207,208,5,108,0,0,208,209,5,115,
        0,0,209,210,5,101,0,0,210,48,1,0,0,0,211,212,5,118,0,0,212,50,1,
        0,0,0,213,214,5,62,0,0,214,52,1,0,0,0,215,216,5,37,0,0,216,54,1,
        0,0,0,217,218,5,94,0,0,218,56,1,0,0,0,219,223,7,0,0,0,220,222,7,
        1,0,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,
        0,0,0,224,58,1,0,0,0,225,223,1,0,0,0,226,228,7,2,0,0,227,226,1,0,
        0,0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,60,1,0,0,
        0,231,237,5,34,0,0,232,233,5,92,0,0,233,236,7,3,0,0,234,236,8,4,
        0,0,235,232,1,0,0,0,235,234,1,0,0,0,236,239,1,0,0,0,237,235,1,0,
        0,0,237,238,1,0,0,0,238,240,1,0,0,0,239,237,1,0,0,0,240,241,5,34,
        0,0,241,62,1,0,0,0,242,244,7,5,0,0,243,242,1,0,0,0,244,245,1,0,0,
        0,245,243,1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,248,6,31,0,
        0,248,64,1,0,0,0,249,250,5,66,0,0,250,251,5,111,0,0,251,252,5,111,
        0,0,252,253,5,108,0,0,253,66,1,0,0,0,254,255,5,73,0,0,255,256,5,
        110,0,0,256,257,5,116,0,0,257,68,1,0,0,0,258,259,5,83,0,0,259,260,
        5,116,0,0,260,261,5,114,0,0,261,262,5,105,0,0,262,263,5,110,0,0,
        263,264,5,103,0,0,264,70,1,0,0,0,265,266,5,73,0,0,266,267,5,79,0,
        0,267,72,1,0,0,0,268,269,5,79,0,0,269,270,5,98,0,0,270,271,5,106,
        0,0,271,272,5,101,0,0,272,273,5,99,0,0,273,274,5,116,0,0,274,74,
        1,0,0,0,275,276,5,83,0,0,276,277,5,69,0,0,277,278,5,76,0,0,278,279,
        5,70,0,0,279,280,5,95,0,0,280,281,5,84,0,0,281,282,5,89,0,0,282,
        283,5,80,0,0,283,284,5,69,0,0,284,76,1,0,0,0,285,286,5,99,0,0,286,
        287,5,97,0,0,287,288,5,115,0,0,288,289,5,101,0,0,289,78,1,0,0,0,
        290,291,5,111,0,0,291,292,5,102,0,0,292,80,1,0,0,0,293,294,5,101,
        0,0,294,295,5,115,0,0,295,296,5,97,0,0,296,297,5,99,0,0,297,82,1,
        0,0,0,298,299,5,110,0,0,299,300,5,101,0,0,300,301,5,119,0,0,301,
        84,1,0,0,0,302,303,5,105,0,0,303,304,5,115,0,0,304,305,5,118,0,0,
        305,306,5,111,0,0,306,307,5,105,0,0,307,308,5,100,0,0,308,86,1,0,
        0,0,309,310,5,110,0,0,310,311,5,111,0,0,311,312,5,116,0,0,312,88,
        1,0,0,0,313,314,5,60,0,0,314,315,5,45,0,0,315,90,1,0,0,0,316,317,
        5,61,0,0,317,318,5,62,0,0,318,92,1,0,0,0,319,320,5,59,0,0,320,94,
        1,0,0,0,321,322,5,58,0,0,322,96,1,0,0,0,323,324,5,44,0,0,324,98,
        1,0,0,0,325,326,5,46,0,0,326,100,1,0,0,0,327,328,5,40,0,0,328,102,
        1,0,0,0,329,330,5,41,0,0,330,104,1,0,0,0,331,332,5,123,0,0,332,106,
        1,0,0,0,333,334,5,125,0,0,334,108,1,0,0,0,335,336,5,47,0,0,336,337,
        5,47,0,0,337,341,1,0,0,0,338,340,9,0,0,0,339,338,1,0,0,0,340,343,
        1,0,0,0,341,342,1,0,0,0,341,339,1,0,0,0,342,344,1,0,0,0,343,341,
        1,0,0,0,344,345,5,10,0,0,345,346,1,0,0,0,346,347,6,54,0,0,347,110,
        1,0,0,0,348,349,5,47,0,0,349,350,5,42,0,0,350,354,1,0,0,0,351,353,
        9,0,0,0,352,351,1,0,0,0,353,356,1,0,0,0,354,355,1,0,0,0,354,352,
        1,0,0,0,355,357,1,0,0,0,356,354,1,0,0,0,357,358,5,42,0,0,358,359,
        5,47,0,0,359,360,1,0,0,0,360,361,6,55,0,0,361,112,1,0,0,0,362,363,
        9,0,0,0,363,114,1,0,0,0,8,0,223,229,235,237,245,341,354,1,6,0,0
    ]

class YAPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    ID = 29
    INT_CONST = 30
    STR_CONST = 31
    WS = 32
    BOOL = 33
    INT = 34
    STRING = 35
    IO = 36
    OBJECT = 37
    SELF_TYPE = 38
    CASE = 39
    OF = 40
    ESAC = 41
    NEW = 42
    ISVOID = 43
    NOT = 44
    ASSIGN = 45
    ARROW = 46
    SEMI = 47
    COLON = 48
    COMMA = 49
    DOT = 50
    LPAREN = 51
    RPAREN = 52
    LBRACE = 53
    RBRACE = 54
    LINE_COMMENT = 55
    COMMENT = 56
    ErrorChar = 57

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'inherits'", "'+'", "'-'", "'*'", "'/'", "'<'", 
            "'<='", "'='", "'@'", "'~'", "'return'", "'let'", "'in'", "'if'", 
            "'then'", "'else'", "'fi'", "'while'", "'loop'", "'pool'", "'self'", 
            "'true'", "'false'", "'v'", "'>'", "'%'", "'^'", "'Bool'", "'Int'", 
            "'String'", "'IO'", "'Object'", "'SELF_TYPE'", "'case'", "'of'", 
            "'esac'", "'new'", "'isvoid'", "'not'", "'<-'", "'=>'", "';'", 
            "':'", "','", "'.'", "'('", "')'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT_CONST", "STR_CONST", "WS", "BOOL", "INT", "STRING", 
            "IO", "OBJECT", "SELF_TYPE", "CASE", "OF", "ESAC", "NEW", "ISVOID", 
            "NOT", "ASSIGN", "ARROW", "SEMI", "COLON", "COMMA", "DOT", "LPAREN", 
            "RPAREN", "LBRACE", "RBRACE", "LINE_COMMENT", "COMMENT", "ErrorChar" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "ID", "INT_CONST", "STR_CONST", "WS", 
                  "BOOL", "INT", "STRING", "IO", "OBJECT", "SELF_TYPE", 
                  "CASE", "OF", "ESAC", "NEW", "ISVOID", "NOT", "ASSIGN", 
                  "ARROW", "SEMI", "COLON", "COMMA", "DOT", "LPAREN", "RPAREN", 
                  "LBRACE", "RBRACE", "LINE_COMMENT", "COMMENT", "ErrorChar" ]

    grammarFileName = "YAPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


